/* 

Start Date: August 3rd 2020 - 2:30 am
Finish Date: September 3rd 2021 - 10:02 pm

Description: 

The sequence of triangle numbers is generated by adding the natural numbers. 
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

Notes:
8/03/20 - 2:42 am : I wrote a function that will calculate triangle numbers. Need to check divisors when I'm not as tired.
8/24/21 - 2:38 pm : I'm not as tired anymore. First issue is that I'm calculating every number consecutively for some reason. 
I'm going to just use a formula to find a specific triangle number. 
9/3/21 - 10:02 pm : Nvm I was still tired. Wrote a quick brute localization algorithm. 
*/


function findTriangleNumber(nth) {
    let tri_num = nth * (nth + 1) / 2;
    return tri_num;
}

function findFactorCount(num) {
    if (num == 0) return 0;
    if (num == 1) return 1;

    let upper_bound = num;
    let factor_count = 2; // 1 and itself
    for (let i = 2; i < upper_bound; i++) {
        if (num % i == 0) {
            upper_bound = num / i;
            if (i != num / i) {
                factor_count += 2;
            }
            else {
                factor_count += 1;
            }
        }
    }
    return factor_count;
}

function bruteLocalization(target) {
    let i = 0;
    let solution = 0;
    while (solution == 0) {
        let num = findTriangleNumber(i)
        let current = findFactorCount(num);
        if (current >= target) {
            console.log(`----------------\nPointer: ${i}\nFactors: ${current}\n----------------`);
            solution = num;
        }
        i++;
    }
    return solution;
}

console.log(`Solution: ${bruteLocalization(500)}`);